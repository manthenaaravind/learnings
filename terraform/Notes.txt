
Terraform:
Terraform creates infrastructure like VMs, networks, and disks. e.t.c.
using terraform you can call shell-script/ansible/chef/PowerShell.
terraform creates infrastructure in any platform.
it is developed by Hashicorp
   workflow:
   -> Create a terraform file (DSL) with your infra needs.
   -> Execute terraform to create infra.

terraform initialize 
terraform plan
terraform apply

Terraform configuration consists of three sections
terraform{}:
This section is used to set terraform configurations such as providers, version, and remote state.
provider{}:
The provider section defines and configures a specific infrastructure provider, such as passing credentials, defining variables specific to the provider, and enabling/disabling optional features.
resource{}:
this section consists of the actual resources we are going to manage

Terraform configurations can include variables to make your configuration more dynamic and flexible. these variables can be provided in variables.tf file created in your terraform project directory.

when building complex infrastructure, terraform stores hundreds or thousands of attribute values for all your resources. As a user of Terraform, you may be interested in only a few values of importance. Outputs designate which data to display. this data is outputted when apply is called, and can be queried using the "terraform output" command. output is defined in a file named "outputs.tf" created in your terraform project directory.

Set environment variables:
export ARM_CLIENT_ID="<APPID_VALUE>"
export ARM_CLIENT_SECRET="<PASSWORD_VALUE>"
export ARM_SUBSCRIPTION_ID="<SUBSCRIPTION_ID>"
export ARM_TENANT_ID="<TENANT_VALUE>"

Data Sources:
Data sources retrieve information from the infrastructure provider or external sources. Data sources do not create or manage resources but provide information that can be used elsewhere in your terraform configuration. We can use data source information by using "data.type(first label).name(second label)"

Modules:
Modules are used to package and reuse resource configurations with Terraform.
Terraform uses modules from the local filesystem as well as from public or private remote registries.
Every terraform configuration has at least one module called as root module
Modules are called using "module" block.
After adding/removing/modifying the the module blocks, you must re-run "terraform init" to allow terraform to adjust the installed modules.

Key Points:
	1. Terraform normally loads all of the .tf and .tf.json files within a directory and expects each one to define a distinct set of configuration objects. Separating various blocks into different files is purely for the convenience of readers and maintainers, and has no effect on modules behaviour.
	2. terraform has special handling of any configuration file whose name ends with "override.tf" or "override.tf.json". Terraform skips these override files when loading configuration, and then afterwards processes each one in turn. For each top-level block defined in an override file, terraform attempts to find an already-defined object corresponding to that block and then merges the override block contents into the existing object.
	3. when you run the "terraform init" command, terraform installs the provider plugin and remembers its decision by creating .terraform.lock.hcl file so that it can make the same decisions again in the future. the dependency lock file is created with .hcl extension just to signify that it is not a terraform configuration file.
	4. terraform creates a ".terraform" subdirectory in your root directory as a cache (saves plugins).
	5. for single line comments we can use '#' and for multiline we can use /* <content> */
	6. terraform also supports an alternate syntax that is JSON-compatible, this syntax is useful when generating portions of a configuration programmatically and files named with a ".tf.json" syntax.


Commands:
terraform init                                          => initialize the backened such as installing provider plugins. rerun the command for any new changes.
                                                            terraform will create ".terraform.lock.hcl" file to record the provider selections it made during 
                                                            initialization and guarantee the same selection by default whenever you run init again in the future.
terraform init -upgrade                                 => to skip version selection recorded in a dependency lock file and search for new based on version 
                                                            constraint in the configuration file.
terraform fmt                                           => to format the terraform configuration files.
terraform validate                                      => to validate the configuration syntax
terraform plan
terraform apply                                         => apply the configuration (create/modify/destory). terraform will create a terraform.tfstate file 
                                                          contains the ID's and properties of the resources created so that it can be used to manage those 
                                                          resources going forward.do not share this file or checkin the repo bcz it may contain the sensitive data.
terraform apply -var "variablename=variablevalue"       => to overwrite the variable values provided in variables.tf file
terraform apply -var-file=secrets.tfvars                => 
terraform apply -var-file=secrets.tfvars --auto-approve    
terraform output <output_variable>                      => query the output returned by the "terraform apply" command.
terraform show                                          => To inspect the current state of the infrastructure. It basically shows the statefile.
terraform state                                         => used to perform state management tasks including inspecting.
terraform state list                                    => to see the list of resources created by terraform.
terraform state rm <item>                               => to remove an item from the terraform state. useful  if we want to manage a resource manually after creation.
terraform destroy                                       => destroy's all the resources managed by terraform project.it terminates all the resources specified in 
                                                           your  state file.
terraform destroy -target vnet.vnetname                 => to destroy the specific resource.                                                           
terraform workspace show                                => to show the terraform workspaces   
terraform workspace list                                => To list the terraform workspaces 

-----

Advantages:
1. Terraform code is simple to understand
2. can we used with multiple cloud vendors(code will be changed)
3. config can be split into multiple files 
4. can perform dryrun easily.
5. Can Import resources which are already created manually.
6. reusable code with modules. 

Disadvantages:
1. third party tool, new services released by cloud vendors wont be avaiable quickly in terraform 
2. Bugs with latest version releases of terraform 
3. lack of support as it is open source 

Terraform files:
  main.tf and other tf files eg: vpc.tf, sec.tf etc 
  variables.tf 
  outputs.tf        => 
  terraform.tfvars   => To pass the values of the variables defined in variables.tf. It is not manadatory but it can avoid changing the main tf code for multiple users
                     => It allows you to define values for variables that are declared in terraform configuration without hardcoding them directly.
                     => terraform automatically loads variables values from the file named terraform.tfvars if it existing in the current working directory when you run 'terraform apply'. 
                        If you use different file name, you can set explicitly using the option -var-file.
  terraform.tfstate  => state file which will be created after terraform apply. It tracks the current state of the infrastructure managed by terraform.
  terraform.tfstate.d/testworkspace/terraform.tfstate    => state file for testworkspace 


  We cannot use multiple .tfvars files to deploy multiple infrastructures in the same working directory. Because each folder has only one state file. Here we can use terraform workspaces.

Terraform workspaces:
  Terraform workspaces allow us to manages multiple instances/deployments of infrastructure within a single terraform configuration. This is helpful because, Terraform creates
  single statefile within the configuration directory and if we want to manage the infrastrutre for multiple environments using same configuration then we need to maintain statefile 
  for each environment separately. workspaces actually does that. Terraform creates a directory for each workspace to save its statefile at terraform.tfstate.d/<workspace>. The statefile 
  present in the current working directory is for default workspace.

Terraform backend:
  Terraform backend configuration determines where and how the terraform state is stored. Terraform supports multiple backends. this lets multiple people
  access the state data and work together on that collection of infrastructure resources.

Remote state locking:
  terraform state locking helps preventing multiple users working on the statefile at the same time and then corrupting it.
  state locking happens automatically on all operation that could write state. 
  
Diff between resource & data blocks:
  resource block is used when we want to create any resource using terraform 
  data block is used if we need any information of existing resource to create another resource.

locals block:

conditional operator (If condition):

taint:

lookup:

element:

null resource:

triggers: 
  

******************************************************************************************

Meta Arguments

depends_on:

count:
  => used to create multiple resources 
  => count is good if we are using it with a list and order of list items doesnot change.
     if the order if items in the list changes, then it will perform destroy operation.

for_each:
  => it supports only map or set datatype input

provider:


*******************************************************************************************

Terraform Functions

https://developer.hashicorp.com/terraform/language/functions
  

*******************************************************************************************

Lifecycle

create_before_destroy:

prevent_destroy:

ignore_changes:

*******************************************************************************************

import 


*******************************************************************************************

Provisioners


local-exec:

remote-exec:

file:



*******************************************************************************************

Modules 


*******************************************************************************************

Terraform cloud 

